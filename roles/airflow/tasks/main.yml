---

- name: create airflow user
  user:
    name: airflow
    comment: "Airflow user"
    shell: /bin/bash
  tags: airflow

- name: set up authorized_keys for airflow user
  authorized_key: user=airflow key="{{ lookup('file', 'public_keys/' + item + '_id_rsa.pub') }}"
  with_items: "{{ ['hadoop'] + airflow_admins }}"
  tags: airflow

- name: assert dfs /user/airflow dir exists
  shell: /usr/local/hadoop-2.9.2/bin/hdfs dfs -ls /user/airflow
  register: assert_user_airflow_dir_exists
  changed_when: no
  ignore_errors: yes
  tags: airflow

- name: create dfs /user/airflow dir
  shell: /usr/local/hadoop-2.9.2/bin/hdfs dfs -mkdir -p /user/airflow &&
         /usr/local/hadoop-2.9.2/bin/hdfs dfs -chown airflow:supergroup /user/airflow
  when: assert_user_airflow_dir_exists is failed
  become: yes
  become_user: hadoop
  tags: airflow

- name: better bash history for 'airflow' user
  blockinfile:
    dest: /home/airflow/.bashrc
    mode: 0644
    marker: "# {mark} ANSIBLE MANAGED BLOCK airflow-history"
    block: |
      HISTFILESIZE=20000
      HISTSIZE=10000
      HISTTIMEFORMAT='%y-%m-%dT%T  '
  become: yes
  become_user: airflow
  tags: airflow

- name: create ~/airflow_home directory
  file:
    path: /home/airflow/airflow_home
    state: directory
  become: yes
  become_user: airflow
  tags: airflow

- name: template airflow config
  template:
    src: airflow.cfg.j2
    dest: /home/airflow/airflow_home/airflow.cfg
  become: yes
  become_user: airflow
  notify:
    - airflow initdb
    - restart airflow-webserver
    - restart airflow-scheduler
  tags: airflow

- name: checkout code base
  git:
    repo: https://github.com/carlba/o3
    version: feature/anaconda-ubuntu-support
    dest: /home/airflow/o3
    accept_hostkey: yes
  become: yes
  become_user: airflow
  tags: airflow

- block:
    - name: ensure anacoda installation tmp dir exist on target system
      file:
        path: '/home/airflow/install/anaconda'
        state: directory
        owner: airflow
      tags: airflow

    - name: ensure anacoda installation file is present on target system
      copy:
        src: resources/Anaconda3-2018.12-Linux-x86_64.sh
        dest: '/home/airflow/install/anaconda'
        owner: airflow
        mode: u+x,g+x
      tags: airflow

    - name: ensure anacoda is installed
      shell: '/home/airflow/install/anaconda/Anaconda3-2018.12-Linux-x86_64.sh -b'
      args:
        creates: /home/airflow/anaconda3
      become: yes
      become_user: airflow
      register: ensure_anacoda_is_installed
      tags: airflow

    - name: ensure conda is updated
      shell: '/home/airflow/anaconda3/bin/conda update -y conda'
      become: yes
      become_user: airflow
      when: ensure_anacoda_is_installed.changed
      tags: airflow

    - name: ensure conda is initialized
      shell: '/home/airflow/anaconda3/bin/conda init bash'
      become: yes
      become_user: airflow
      when: ensure_anacoda_is_installed.changed
      tags: airflow

    - name: ensure conda environment is created based on environment.yml file (first attempt)
      shell: '/home/airflow/anaconda3/bin/conda env create --name o3 python=3.6 -f /home/airflow/o3/environment-linux.yml'
      become: yes
      become_user: airflow
      ignore_errors: true
      register: ensure_conda_environment_is_created
      when: ensure_anacoda_is_installed.changed
      tags: airflow

    - name: ensure conda environment is created based on environment.yml file
      shell: '/home/airflow/anaconda3/bin/conda env create --name o3 python=3.6 -f /home/airflow/o3/environment-linux.yml'
      become: yes
      become_user: airflow
      when: ensure_anacoda_is_installed.changed and ensure_conda_environment_is_created.failed
      tags: airflow

    - name: ensure o3 package is installed within the anacoda environment o3
      shell: bash -lc 'source /home/airflow/anaconda3/bin/activate o3;
             pip install -e /home/airflow/o3'
      become: yes
      become_user: airflow
      register: ensure_o3_package_is_installed
      changed_when: "'Found existing installation: o3' not in ensure_o3_package_is_installed.stdout"
      notify:
        - airflow initdb
        - restart airflow-webserver
        - restart airflow-scheduler
      tags: airflow

  when: ansible_distribution == 'Ubuntu'

- block:
    - name: create airflow python3 virtualenv (CentOS)
      shell: scl enable rh-python36 'virtualenv -p python3 /home/airflow/pyenv'
      args:
        creates: /home/airflow/pyenv
      become: yes
      become_user: airflow
      tags: airflow

    - name: install pip requirements (CentOS)
      shell: scl enable rh-python36 'SLUGIFY_USES_TEXT_UNIDECODE=yes
             /home/airflow/pyenv/bin/pip install -r /home/airflow/o3/requirements.txt'
      become: yes
      become_user: airflow
      register: scl_pip_install_requirements
      changed_when: "'Successfully ' in scl_pip_install_requirements.stdout"
      notify:
        - airflow initdb
        - restart airflow-webserver
        - restart airflow-scheduler
      tags: airflow

  when: ansible_distribution == 'CentOS'

- name: template airflow-environment
  template:
    src: environment.j2
    dest: /home/airflow/airflow-environment
  become: yes
  become_user: airflow
  notify:
    - restart airflow-webserver
    - restart airflow-scheduler
  tags: airflow

- name: source airflow-environment in {{ bash_profile_file }}
  blockinfile:
    path: /home/airflow/{{ bash_profile_file }}
    marker: "# {mark} ANSIBLE MANAGED BLOCK airflow-environment"
    block: |
      set -a
      source /home/airflow/airflow-environment
      export PATH=/usr/local/hadoop-2.9.2/bin:/usr/local/hadoop-2.9.2/sbin:$PATH
      export JAVA_HOME={{ java_home }}
  become: yes
  become_user: airflow
  tags: airflow

- name: start postgres database
  docker_container:
    name: airflow_postgres
    image: postgres:9.6
    state: started
    restart_policy: unless-stopped
    volume_driver: local
    volumes:
      - airflow_postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    env:
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: "{{ airflow_db_user_password }}"
  tags: airflow

- name: template airflow services
  template:
    src: airflow-{{ item }}.service.j2
    dest: /etc/systemd/system/airflow-{{ item }}.service
  with_items:
    - webserver
    - scheduler
  register: add_airflow_services
  notify:
    - restart airflow-webserver
    - restart airflow-scheduler
  tags: airflow

- name: run daemon-reload on airflow services
  shell: systemctl daemon-reload
  when: add_airflow_services is changed
  tags: airflow

- name: set airflow services to running and auto-starting
  service:
    name: airflow-{{ item }}
    state: started
    enabled: yes
  with_items:
    - webserver
    - scheduler
  tags: airflow

...
